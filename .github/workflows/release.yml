name: New Release

# This workflow can be triggered manually with a specified version input or automatically on a push tag
on:
  push:
    tags:
      - 'v*'  # Triggers the workflow on push events that create tags matching the pattern 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'  # Description of the version input
        required: true  # Makes the version input mandatory
        type: string  # Specifies the type of the input as a string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains 2 jobs: build and release
  build:
    # The type of runner that the job will run on
    runs-on: macos-latest  # Specifies that the job runs on a macOS runner

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout sources
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        uses: actions/checkout@v4

      - name: Determine Version
        id: determine_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV  # Sets the VERSION environment variable for workflow_dispatch
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAG_NAME=${{ github.ref_name }}
            VERSION=${TAG_NAME#v}  # Removes the 'v' prefix from the tag name to get the version
            echo "VERSION=${VERSION}" >> $GITHUB_ENV  # Sets the VERSION environment variable for push
          fi

      - name: Use Version
        run: echo "Using version ${{ env.VERSION }}"  # Prints the version being used

      - name: Setup Java 18
        uses: actions/setup-java@v3  # Uses the setup-java action to set up JDK 18
        with:
          java-version: 18  # Specifies the version of Java to set up
          distribution: 'temurin'  # Specifies the distribution of Java to set up (e.g., adopt, zulu, temurin)

      - run: echo "JAVA_18=$JAVA_HOME" >> $GITHUB_ENV  # Sets the JAVA_HOME environment variable

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3  # Uses the setup-gradle action to set up Gradle

      - name: Build with Gradle
        run: ./gradlew build  # Runs the Gradle build command

      - name: Create DMG
        run: ./gradlew packageDistributionForCurrentOS  # Runs the Gradle task to create a DMG file

      - name: Upload Artifact
        uses: actions/upload-artifact@v4  # Uses the upload-artifact action to upload the DMG file
        with:
          name: ADBugger-dmg  # Name of the artifact
          path: build/output/main/dmg/ADBugger-${{ env.VERSION }}.dmg  # Path to the DMG file, using the version input

  # A separate job to handle the release process
  release:
    needs: build  # Specifies that this job depends on the successful completion of the build job
    runs-on: ubuntu-latest  # Specifies that the job runs on an Ubuntu runner

    steps:
      - name: Determine Version
        id: determine_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV  # Sets the VERSION environment variable for workflow_dispatch
          elif [ "${{ github.event_name }}" = "push" ]; then
            TAG_NAME=${{ github.ref_name }}
            VERSION=${TAG_NAME#v}  # Removes the 'v' prefix from the tag name to get the version
            echo "VERSION=${VERSION}" >> $GITHUB_ENV  # Sets the VERSION environment variable for push
          fi

      - name: Use Version
        run: echo "Using version ${{ env.VERSION }}"  # Prints the version being used

      - name: Download Artifact
        uses: actions/download-artifact@v4  # Uses the download-artifact action to download the previously uploaded DMG file
        with:
          name: ADBugger-dmg  # Name of the artifact to download
          path: ./  # Path to download the artifact to

      - name: Create GitHub Release
        id: create_release  # Sets an ID for the step to reference later
        uses: actions/create-release@v1  # Uses the create-release action to create a GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Uses the GitHub token to authenticate
        with:
          tag_name: v${{ env.VERSION }}  # Tag name for the release, using the version input
          release_name: Release v${{ env.VERSION }}  # Name of the release, using the version input
          draft: false  # Specifies that the release is not a draft
          prerelease: false  # Specifies that the release is not a prerelease

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v2  # Uses the upload-release-asset action to upload the DMG file to the release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Uses the GitHub token to authenticate
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # URL to upload the release asset to, obtained from the create-release step
          asset_path: ./ADBugger-${{ env.VERSION }}.dmg  # Path to the DMG file, using the version input
          asset_name: ADBugger-${{ env.VERSION }}.dmg  # Name of the release asset, using the version input
          asset_content_type: application/x-apple-diskimage  # Specifies the content type of the release asset
